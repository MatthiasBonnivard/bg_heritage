//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

public class DrainageAutogene
{
	private List<Respiration> respirations;
	private int indexRespirationAct;
	private InputState state=InputState.INSPIRATION;
	private InputState lastState=InputState.INSPIRATION;
	private float lastEndVolume = 0.5f;

	/// <summary>
	/// 0 -> Empty lungs
	/// 1 -> Full lungs
	/// </summary>
	private float volume=1.0f;
	//TODO: Make this as a param
	private static float expirationMinTime = 10.0f;
	
	//TODO: Make this a parameter
	private static float speedInspiration=0.5f;
	private static float inspirationMinTime = 1.0f/speedInspiration;

	public DrainageAutogene ()
	{

		respirations = new List<Respiration> (9);
		respirations.Add (new Respiration (0.0f, 1.0f, 0.5f, speedInspiration));
		respirations.Add (new Respiration (0.5f, 1.0f, 0.5f, speedInspiration));
		respirations.Add (new Respiration (0.5f, 1.0f, 0.25f, speedInspiration));
		respirations.Add (new Respiration (0.25f, 0.75f, 0.25f, speedInspiration));
		respirations.Add (new Respiration (0.25f, 0.75f, 0.25f, speedInspiration));
		respirations.Add (new Respiration (0.25f, 0.75f, 0.0f, speedInspiration));
		respirations.Add (new Respiration (0.0f, 0.5f, 0.0f, speedInspiration));
		respirations.Add (new Respiration (0.0f, 0.5f, 0.0f, speedInspiration));
		respirations.Add (new Respiration (0.0f, 0.5f, 0.0f, speedInspiration));
		indexRespirationAct = 0;
	}

	public void CheckProgress(IOController_I ioController){
		lastState = state;
		state = ioController.GetInputState ();

		if (state == InputState.EXPIRATION || state == InputState.STRONG_EXPIRATION) {
			//TODO: Make this "0.5" computed...
			volume-=ioController.GetStrength()*Time.deltaTime/(expirationMinTime*0.5f);
			if(volume<ActualRespiration.EndVolume){
				volume=ActualRespiration.EndVolume;
			}
		}

		if (state == InputState.INSPIRATION) {
			//TODO: Make this "0.5" computed...
			volume+=ioController.GetStrength()*Time.deltaTime*speedInspiration;
			if(volume>ActualRespiration.MaxVolume){
				volume=ActualRespiration.MaxVolume;
			}
			if (lastState != state) {
				float volumeExpired=ActualRespiration.MaxVolume-volume;
				float volumeToExpire=ActualRespiration.MaxVolume-ActualRespiration.EndVolume;

				//TODO: Make this 0.75f as parameter
				if(volumeExpired>=0.75f*volumeToExpire){
					indexRespirationAct++;
					indexRespirationAct%=respirations.Count;
				}
			}
		}
	}

	public String GetWarning(){
		float v1=respirations[indexRespirationAct].EndVolume;
		string toReturn=null;

		if (v1 < lastEndVolume) {
			toReturn= "\\/";
		} else if(v1 > lastEndVolume) {
			toReturn= "/\\";
		}
		lastEndVolume = v1;
		return toReturn;
	}

	public Respiration GetActualRespiration(){
		return respirations [indexRespirationAct];
	}
	
	public float ActualMin {
		get{ return this.respirations [this.indexRespirationAct].EndVolume;}
	}
	
	public float ActualMax {
		get{ return this.respirations [this.indexRespirationAct].MaxVolume;}
	}

	public float Volume {
		get{ return this.volume;}
	}

	public Respiration ActualRespiration {
		get{ return respirations [indexRespirationAct];}
	}
}


